# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types:
      - published

permissions: {}

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        os: [linux, windows]
        
    steps:
    
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'
        
    - name: Install dependencies
      run: |
        go get .
        
    - name: Build [windows]
      if: matrix.os == 'windows'
      run: |
        CGO_ENABLED=0 GOOS=$os GOARCH=amd64 go build -ldflags="-s -w -X 'main.version=$(git describe --tags)'" -trimpath -o omada-to-gotify.exe main.go
        zip -9q omada-to-gotify-$os-amd64.zip omada-to-gotify.exe LICENSE
        rm omada-to-gotify.exe
        printf "sha256: %s\n" "$(shasum -a 256 omada-to-gotify-$os-amd64.zip)"
      env:
        os: ${{ matrix.os }}

    - name: Build [linux]
      id: build_linux
      if: matrix.os == 'linux'
      run: |
        echo "TAG=$(git describe --tags)" >> "$GITHUB_OUTPUT"
        CGO_ENABLED=0 GOOS=$os GOARCH=amd64 go build -ldflags="-s -w -X 'main.version=$(git describe --tags)'" -trimpath -o omada-to-gotify main.go
        tar -I 'gzip -9' -cf omada-to-gotify-$os-amd64.tar.gz omada-to-gotify LICENSE
        rm omada-to-gotify
        printf "sha256: %s\n" "$(shasum -a 256 omada-to-gotify-$os-amd64.tar.gz)"
      env:
        os: ${{ matrix.os }}

    # The docker build is statically linked for a tiny image, and needs ca-certificates.crt for SSL to work
    # https://www.cloudbees.com/blog/building-minimal-docker-containers-for-go-applications
    - name: Build [docker]
      if: matrix.os == 'linux'
      run: |
        CGO_ENABLED=0 GOOS=$os GOARCH=amd64 go build -a -installsuffix cgo -ldflags="-s -w -X 'main.version=$(git describe --tags)'" -trimpath -o omada-to-gotify main.go
        tar -I 'gzip -9' -cf omada-to-gotify-docker-amd64.tar.gz omada-to-gotify Dockerfile ca-certificates.crt
        rm omada-to-gotify
        printf "sha256: %s\n" "$(shasum -a 256 omada-to-gotify-docker-amd64.tar.gz)"
      env:
        os: ${{ matrix.os }}

    - name: Upload Release Assets [windows]
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' && matrix.os == 'windows'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: omada-to-gotify-${{ matrix.os }}-amd64.zip

    - name: Upload Release Assets [linux]
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        os: ${{ matrix.os }}
      with:
        files: omada-to-gotify-${{ matrix.os }}-amd64.tar.gz        

    - name: Upload Release Assets [docker]
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: omada-to-gotify-docker-amd64.tar.gz        

    # Additional docker build steps for 'os=linux'

    - name: Log in to Docker Hub [docker]
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      with:
        images: shiari/omada-to-gotify

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      with:
        context: https://github.com/Leeft/omada-to-gotify/releases/download/${{ steps.build_linux.outputs.TAG }}/omada-to-gotify-docker-amd64.tar.gz
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v3
      if: github.ref_type == 'tag' && matrix.os == 'linux'
      with:
        subject-name: index.docker.io/shiari/omada-to-gotify
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

        #    - name: Test
#      run: go test -v ./...
